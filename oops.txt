OOPs concept :-
oops:- OOP stands for Object-Oriented Programming.
       OOP is faster and easier to execute
       OOP provides a clear structure for the programs
       OOP helps to keep the C# code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
       OOP makes it possible to create full reusable applications with less code and shorter development time
       Classes and objects are the two main aspects of object-oriented programming.
Class:- A class is simply a user-defined data type that represents both state and behavior. 
        The state represents the properties and behavior is the action that objects can perform.
        we can say that a class is the blueprint/plan/template that describes the details of an object. 
       A class is a blueprint from which the individual objects are created.
       A Class is composed of three things i.e. a name, attributes, and operations.
  
Example :-
            class Car 
{
  string color = "red";
}

Object :-  It is an instance of a class. A class is brought live by creating objects. 
            An object can be considered as a thing that can perform activities. 
           The set of activities that the object performs defines the objectâ€™s behavior. 
          All the members of a class can be accessed through the object. To access the class members, we need to use the dot (.) operator. 
          The dot operator links the name of an object with the name of a member of a class.
Example:-
          class Car 
{
  string color = "red";

  static void Main(string[] args)
  {
    Car myObj = new Car();
    Console.WriteLine(myObj.color);
  }
}

Constructor :-  constructor is a special method which is invoked automatically at the time of object creation.
                It is the same name as the class name.
                It does not have a return type.
                It does not have input argument.
Example:-
          car() // constructor

Inheritance:- it is possible to inherit fields and methods from one class to another.
              Derived Class (child) - the class that inherits from another class  
              Base Class (parent) - the class being inherited from.
  Example :-
             class Vehicle  // base class (parent) 
{
  public string brand = "Ford";  // Vehicle field
  public void honk()             // Vehicle method 
  {                    
    Console.WriteLine("Tuut, tuut!");
  }
}

class Car : Vehicle  // derived class (child)
{
  public string modelName = "Mustang";  // Car field
}

Access Modifier:- 4 Types of access modifier
   Private:-we can access that member with the class only. From outside the class, we cannot access them.
  
   Public :- then we can access that member from anywhere. That means there is no restriction for public members. 

   Protected:- That means protected members are available within the parent class (i.e. the containing type) 
               as well as to the child/derived classes (classes derived from the containing type).